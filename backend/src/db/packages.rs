//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use rocket::serde::Serialize;
use rocket_okapi::okapi::schemars;
use rocket_okapi::JsonSchema;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, JsonSchema)]
#[sea_orm(table_name = "packages")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub status: i32,
    pub out_of_date: i32,
    pub version: Option<String>,
    pub latest_aur_version: Option<String>,
    pub latest_build: Option<i32>,
    pub build_flags: String,
    pub platforms: String,
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::builds::Entity")]
    Builds,
    #[sea_orm(
        belongs_to = "super::builds::Entity",
        from = "Column::LatestBuild",
        to = "super::builds::Column::Id"
    )]
    LatestBuild,
}

impl Related<super::builds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Builds.def()
    }
}

impl Related<super::files::Entity> for Entity {
    fn to() -> RelationDef {
        super::packages_files::Relation::Files.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::packages_files::Relation::Packages.def())
    }
}
