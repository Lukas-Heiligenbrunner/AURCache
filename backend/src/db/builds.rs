//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use rocket::serde::Serialize;
use rocket_okapi::okapi::schemars;
use rocket_okapi::JsonSchema;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, JsonSchema)]
#[sea_orm(table_name = "builds")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub pkg_id: i32,
    pub version_id: i32,
    pub ouput: Option<String>,
    pub status: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::versions::Entity",
        from = "Column::VersionId",
        to = "super::versions::Column::Id"
    )]
    Versions,
    #[sea_orm(
        belongs_to = "super::packages::Entity",
        from = "Column::PkgId",
        to = "super::packages::Column::Id"
    )]
    Packages,
}

impl Related<super::versions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Versions.def()
    }
}

impl Related<super::packages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Packages.def()
    }
}
impl ActiveModelBehavior for ActiveModel {}
